网络通信：用的是udp和tcp
  

ip： 找到目标电脑
端口：提供端口找到应用程序，就是一个通道
进程：一个程序没有运行之前叫做程序，运行起来叫做进程

网络通信其实就是，电脑主机的进程在相互通信

端口怎么分配：
  知名端口： 80端口分配给http，21端口分配给FTP,小于1024的就是 0--1023
  动态端口：大于从1024-65535
怎么看端口：
  netstat -an 查看端口状态
  lsof -i [tcp/udp]:2425

socket简介： 是进程间通信的一种方式，它能实现不同主机间的进程间通信，(只要是有网络都用的是socket)
  1.不同电脑上的进程之间如何通信
   创建socket
   import socket
   socket.socket(AddressFmaily, Type) # ipv4 or ipv6，upd或者是tcp
   socket.socket(socket.AF_INET, socket.SOCK_STREAM)  // AF_INET是ipv4的意思 SOCK_STREAM是tcp的意思
   s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) // ipv4 udp
   s.close()
  2.使用socket
    ```
    import socket
    def main():
      # 创建一个udp套接字
      upd_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
      # 可以使用套接字收发数据
      udp_socket.sendto(b"haha--lijun", ("192.168.3.111", 8080)) # 对方的ip和端口 
      # 关闭套接字
      upd_socket.close()
     if __name__ == "__main__":
      main()
    ```
    在网络助手就可以查看了
    sudo dhclient : 分配ip给你的
    
    接收数据：
      from socket import *
      # 创建socket
      upd_socket = socket(AF_INET, SOCK_DGRAM)
      # 绑定本地的相关信息，如果一个网络程序不绑定，则系统会随机分配
      local_addr = ('', 7788) # ip地址和端口号，ip一般不用写
      udp_socked.bind(local_addr)
      
      #3.等待接收对方发送的数据
      recv_data = udp_socket.recvfrom(1024) # 1024表示本次接收的最大的字节数
      #4.显示接收到的数据
      print(recv_data[0].decode('gbk))
      #5.关闭socket
      udp_socket.close()
      
    同一时间，不同程序不能使用同一个端口
    
    for example：
      udp聊天器：
      ```
      import socket
      def main():
        udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        dest_ip = input("请输入对方的ip:)
        send_data = int(input("请输入对方端口port:"))
        
        udp_socket.sendto(send_data.encode("utf-8"), (dest_ip, dest_port))
        
        udp_socket.close()
        
      ```
      如果本地两个程序想通过网络共享数据 就是用来本地环回 127.0.0.1
      
      
      单工： 只能一个方向
      半双工： 对讲机
      全双工： socket是全双工
      ```
      import socket
      
      def main():
        # 创建套接字
        udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        # 循环来进行处理事情
        while True:
          # 发送
          
          # 接收并显示
      
      if __name__ == "__main__":
        main()
      ```
      程序要倒着推，从目标往回写
      
      操作系统，应用程序 先存起来，什么时候需要了，在调用
      
     ===========================tcp=============================
     tcp：传输控制协议
     udp：写信，在通信之间不需要建立相关的连接，只需要发送就可以了，不安全，数据有可能丢
     tcp：打电话，在通信双方必须要先建立连接才能进行数据的传输，双方都必须为该连接分配必要的系统内核资源，以管理连接转态和连接上的传输，数据不丢失
     
     tcp收到数据会告诉你，他已经收到了
     
     视频下载里面就有数据上传
     TCP与UDP的不同点
      面向连接
      有序数据传输
      重发丢失的数据包
      舍弃重复的数据包
      无差错的数据传输
      阻塞/流量控制
     
    发文件是tcp，基本上是tcp 保证数据的稳定
    
    
    
    
     
     
     
      
